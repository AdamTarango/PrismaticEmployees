const express = require("express");
const router = express.Router();
module.exports = router;

const prisma = require("../prisma");

router.get("/", async (req, res, next) => {
  try {
    const employees = await prisma.employee.findMany();
    res.json(employees);
  } catch (e) {
    next(e);
  }
});

router.post("/", authenticate, async (req, res, next) => {
  const { name } = req.body;
  if (!name) {
    next({ status: 400, message: "Name must be provided" })
  }
  try {
    const employee = await prisma.employee.create({
      data: { name },
    });
    res.status(201).json(playlist);
  } catch (e) {
    next(e);
  }
});

router.get("/:id", async (req, res, next) => {
  const { id } = req.params;
  try {
    const employee = await prisma.employee.findUnique( { where: { id : +id } });
    if (!employee) {
      next({ status: 404, message: `employee with id ${id} not found` })
    }
    res.json(employee);
  } catch (e) {
    next(e);
  }
});

router.geputt("/:id", async (req, res, next) => {
  const { name } = req.params
  const { id } = req.params;
  if (!name) {
    next({ status: 400, message: "Name must be provided" })
  }
  try {
    const employee = await prisma.employee.findUnique( { where: { id : +id } });
    if (!employee) {
      next({ status: 404, message: `employee with id ${id} not found` })
    }
    const updatedEmployee = await prisma.employee.update({
      where: { id: +id },
      data: { name },
    });
    res.json(updatedEmployee);
  } catch (e) {
    next(e);
  }
});

router.delete("/:id", async (req, res, next) => {
  const { id } = req.params;

  try {
    // Check if the employeeexists
    const employee = await prisma.employee.findUnique({ where: { id: +id } });
    if (!employee) {
      return next({ status: 404,message: `Employee with id ${id} does not exist.` });
    }
    await prisma.employee.delete({ where: { id: +id } });
    res.sendStatus(204);
  } catch (e) {
    next(e);
  }
});